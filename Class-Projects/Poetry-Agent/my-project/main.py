from agents import Agent, Runner, trace
from dotenv import load_dotenv
from connection import config
import asyncio
import streamlit as st  # ✅ Streamlit UI

load_dotenv()

# 🎭 Sub-agents
lyric_agent = Agent(
    name="Lyric Poetry Agent",
    instructions="""
    You are a lyric poetry agent. Write short, emotional poems that express personal feelings like love, longing, loneliness, or joy. Focus on mood, not story. Use soft, expressive, and vivid language.
    """
)

narrative_agent = Agent(
    name="Narrative Poetry Agent",
    instructions="""
    You are a narrative poetry agent. Create poems that tell complete stories with characters, setting, and plot. Use a storytelling tone, and maintain poetic rhythm and flow.
    """
)

dramatic_agent = Agent(
    name="Dramatic Poetry Agent",
    instructions="""
    You are a dramatic poetry agent. Write dialogue-driven poems where characters express emotions and conflicts. Style it like a scene from a play, with intensity and expression.
    """
)

# 🤖 Parent agent
poet_parent_agent = Agent(
    name="Poetry Parent Agent",
    instructions="""
    You are a poetry coordinator agent. Your role is to understand the user's input and decide whether it needs a lyric, narrative, or dramatic poem. 
    Use handoffs to delegate the task to the appropriate sub-agent based on the user's tone, emotion, or storytelling need.

    If the user's request is short (e.g., just a few words like "sad poetry", "love", "betrayal"), **do not ask questions**. 
    Instead, intelligently infer the intent:
    - If it involves emotions or moods, hand off to the Lyric Poetry Agent.
    - If it mentions characters, events, or storytelling, hand off to the Narrative Poetry Agent.
    - If it sounds like a scene or dialogue, hand off to the Dramatic Poetry Agent.

    Avoid asking clarifying questions unless the request is completely unrelated to poetry.
    Always return a poem matching the user’s style or tone.
    """,
    handoffs=[lyric_agent, narrative_agent, dramatic_agent]
)


# 🔄 Async runner function
async def run_poetry_agent(user_input):
    with trace("Poetry Agent"):
        result = await Runner.run(
            poet_parent_agent,
            user_input,
            run_config=config
        )
        return result

# 🌐 Streamlit UI (Bold & Artistic)
st.set_page_config(page_title="AI Poetry Generator", layout="centered")

# 🎨 Custom CSS
st.markdown("""
    <style>
    body {
        background-color: #f0eafc;
    }
    .title {
        font-size: 3em;
        text-align: center;
        font-weight: bold;
        background: -webkit-linear-gradient(45deg, #8e44ad, #3498db);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        padding-top: 10px;
        padding-bottom: 5px;
    }
    .subtitle {
        text-align: center;
        font-size: 1.2em;
        color: #555;
        margin-bottom: 30px;
    }
    .text-area textarea {
        font-size: 1.1rem;
        border-radius: 10px;
        background-color: #ffffff;
    }
    .poem-box {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        font-size: 1.1rem;
        line-height: 1.6;
        color: #333;
    }
    .stButton button {
        background-color: #6a0dad;
        color: white;
        font-weight: 600;
        border: none;
        padding: 0.6em 1.2em;
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    .stButton button:hover {
        background-color: #9b59b6;
        transform: scale(1.05);
        box-shadow: 0 0 10px rgba(155, 89, 182, 0.6);
    }
    </style>
""", unsafe_allow_html=True)

# 📝 UI Layout
st.markdown('<div class="title">🎭 AI Poetry Generator</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Type your feeling or scene... and let the poet in AI create magic! ✨</div>', unsafe_allow_html=True)

user_input = st.text_area("🎯 Your Poetry Request:", height=150, placeholder="E.g. Write a dramatic poem about betrayal...")

if st.button("✨ Generate Poetry"):
    if user_input.strip() == "":
        st.warning("Please enter a prompt first.")
    else:
        with st.spinner("Generating your poem..."):
            poetry_result = asyncio.run(run_poetry_agent(user_input))
            st.success("Here is your poem:")

            st.markdown(f"### 📜 Poem Output:\n\n{poetry_result.final_output}")
            st.markdown(f"**🤖 Generated by:** `{poetry_result.last_agent.name}`")

